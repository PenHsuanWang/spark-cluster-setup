version: '3.8'

services:
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - spark-logs:/opt/bitnami/spark/logs
      - ./spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./log4j.properties:/opt/bitnami/spark/conf/log4j.properties
    networks:
      spark_network:
        aliases:
          - spark-master
    mem_limit: 2g
    cpus: 1

  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=4
      - SPARK_WORKER_MEMORY=6g
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - AWS_S3_ENDPOINT=http://minio:9000
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    volumes:
      - spark-worker:/opt/bitnami/spark/work
      - spark-logs:/opt/bitnami/spark/logs
      - ./spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./log4j.properties:/opt/bitnami/spark/conf/log4j.properties
    networks:
      spark_network:
        aliases:
          - spark-worker
    mem_limit: 6g
    cpus: 4

  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: jupyter-notebook
    ports:
      - "8888:8888"
      - "4040:4040" 
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./jupyter_logs:/var/log/jupyter
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - AWS_S3_ENDPOINT=http://minio:9000
    depends_on:
      - spark-master
      - minio
      - postgresql
      - kafka1
      - kafka2
      - kafka3
    networks:
      - spark_network
    mem_limit: 6g
    cpus: 2

  spark-history-server:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-history-server
    ports:
      - "18080:18080"
    environment:
      - SPARK_MODE=history-server
      - SPARK_HISTORY_OPTS=-Dspark.history.fs.logDirectory=/opt/bitnami/spark/logs
    volumes:
      - spark-logs:/opt/bitnami/spark/logs
    depends_on:
      - spark-master
    networks:
      - spark_network
    mem_limit: 2g
    cpus: 1

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_LOG_LEVEL=debug
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    networks:
      - spark_network
    mem_limit: 2g
    cpus: 1

  kafka1:
    image: wurstmeister/kafka:latest
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
    volumes:
      - kafka1-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - spark_network
    mem_limit: 4g
    cpus: 2
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka2:
    image: wurstmeister/kafka:latest
    container_name: kafka2
    ports:
      - "9093:9092"
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
    volumes:
      - kafka2-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - spark_network
    mem_limit: 4g
    cpus: 2
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka3:
    image: wurstmeister/kafka:latest
    container_name: kafka3
    ports:
      - "9094:9092"
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
    volumes:
      - kafka3-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - spark_network
    mem_limit: 4g
    cpus: 2
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - spark_network
    mem_limit: 1g
    cpus: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgresql:
    image: postgres:14.5
    container_name: postgresql
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=your_secure_password
      - POSTGRES_DB=mydb
    ports:
      - "5432:5432"
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - spark_network
    mem_limit: 2g
    cpus: 1

networks:
  spark_network:
    driver: bridge

volumes:
  spark-logs: 
    driver: local
  spark-master:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/spark-master
  spark-worker:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/spark-worker
  minio:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/minio
  postgresql:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgresql
  kafka1-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/kafka1
  kafka2-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/kafka2
  kafka3-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/kafka3
