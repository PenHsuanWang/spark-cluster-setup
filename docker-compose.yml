version: '3'

services:
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - spark-logs:/opt/bitnami/spark/logs
      - ./spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./log4j.properties:/opt/bitnami/spark/conf/log4j.properties
    networks:
      spark_network:
        aliases:
          - spark-master
    mem_limit: 2g
    cpus: 1

  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=4
      - SPARK_WORKER_MEMORY=6g
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - AWS_S3_ENDPOINT=http://minio:9000
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    volumes:
      - spark-worker-data:/opt/bitnami/spark/work
      - spark-logs:/opt/bitnami/spark/logs
      - ./spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./log4j.properties:/opt/bitnami/spark/conf/log4j.properties
    networks:
      spark_network:
        aliases:
          - spark-worker
    mem_limit: 6g
    cpus: 4

  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: jupyter-notebook
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./jupyter_logs:/var/log/jupyter
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - AWS_S3_ENDPOINT=http://minio:9000
    depends_on:
      - spark-master
      - minio
      - postgresql
      - kafka
    networks:
      - spark_network
    mem_limit: 6g
    cpus: 2

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_LOG_LEVEL=debug
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    networks:
      - spark_network
    mem_limit: 2g
    cpus: 1

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - spark_network
    mem_limit: 4g
    cpus: 2

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - spark_network
    mem_limit: 1g
    cpus: 1

  postgresql:
    image: postgres:14.5
    container_name: postgresql
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=your_secure_password
      - POSTGRES_DB=mydb
    ports:
      - "5432:5432"
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - spark_network
    mem_limit: 2g
    cpus: 1

networks:
  spark_network:
    driver: bridge

volumes:
  spark-logs: 
    driver: local
  spark-master:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/spark-master
  spark-worker:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/spark-worker
  minio:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/minio
  postgresql:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgresql